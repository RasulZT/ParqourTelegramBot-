import json
import logging

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
import core.keyboards.keyboards as kb
from core.utils.ChatHistoryHandler import ChatHistoryHandler
from core.utils.RestHandler import RestHandler
from rest_framework import response

from core.keyboards.inline import get_common_menu, get_support_menu, get_admin_menu
from core.utils.redis_client import redis

router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–∞ ‚Üí –≤ —Ç–æ–ø–∏–∫
@router.message(F.chat.type == "supergroup", ~F.message_thread_id)
async def redirect_to_topic(message: Message, state: FSMContext):
    MY_GROUP_ID = -1002571604070
    group_chat_id = message.chat.id
    topic_id = await redis.get(f"session:group_to_topic:{group_chat_id}")
    if not topic_id:
        await message.reply("‚ö†Ô∏è –¢–æ–ø–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if message.text:
        await message.bot.send_message(
            chat_id=MY_GROUP_ID,
            message_thread_id=topic_id,
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –æ–±—ä–µ–∫—Ç–∞:\n{message.text}"
        )

        # –§–æ—Ç–æ
    elif message.photo:
        file_id = message.photo[-1].file_id  # –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        await message.bot.send_photo(
            chat_id=MY_GROUP_ID,
            message_thread_id=topic_id,
            photo=file_id,
            caption="üì∑ –§–æ—Ç–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞"
        )

        # –í–∏–¥–µ–æ
    elif message.video:
        await message.bot.send_video(
            chat_id=MY_GROUP_ID,
            message_thread_id=topic_id,
            video=message.video.file_id,
            caption="üé• –í–∏–¥–µ–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞"
        )

        # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞
    elif message.video_note:
        await message.bot.send_video_note(
            chat_id=MY_GROUP_ID,
            message_thread_id=topic_id,
            video_note=message.video_note.file_id
        )

        # –ì–æ–ª–æ—Å–æ–≤–æ–µ
    elif message.voice:
        await message.bot.send_voice(
            chat_id=MY_GROUP_ID,
            message_thread_id=topic_id,
            voice=message.voice.file_id,
            caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

    else:
        await message.reply("‚ö†Ô∏è –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


@router.message(Command(commands=['start', 'run']))
async def _get_start(message: Message, command: CommandObject, rest: RestHandler,
                     state: FSMContext, chat_handler: ChatHistoryHandler):
    try:
        image = FSInputFile("public/assets/images/welcome.png")

        caption = (
            "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Parqour Support Bot</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—è–≤–∫–∞–º–∏, —á–∞—Ç–∞–º–∏ –∏ —Å–µ—Å—Å–∏—è–º–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏ –Ω–∞—á–Ω—ë–º!"
        )

        await message.answer_photo(
            photo=image,
            caption=caption,
            reply_markup=get_common_menu(),
            parse_mode="HTML"
        )

        await get_start(message, rest, state, chat_handler, command)
    except Exception as e:
        logging.error(f"_get_start error: {e}")


# @router.message(Command(commands=['test']))
# async def test(message: Message):
#     logging.info(f"User_id: {message.chat.id}.")
#     logging.info(f"User_id: {message.model_dump_json(indent=2)}.")


async def get_start(
        message: Message,
        rest: RestHandler,
        state: FSMContext,
        chat_handler: ChatHistoryHandler,
        command: CommandObject | None = None,
        delete_previous_messages: bool = True
) -> None:
    try:
        logging.info("üîπ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start")

        payload = {
            'telegram_id': str(message.chat.id),
            'telegram_fullname': message.from_user.full_name,
        }
        logging.info(f"üì§ Payload to [v1/auth/tgregister/]: {json.dumps(payload)}")

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        try:
            user = await rest.post(url="v1/auth/tgregister/", data=payload)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            user = None

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ—à–∏–±–∫–∞
        if isinstance(user, list) or not user:
            payload['telegram_fullname'] = f"-telegram- {message.from_user.full_name}"
            payload['promo'] = ''
            logging.info(f"üì§ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π payload [auth/register/]: {json.dumps(payload)}")
            user = await rest.post(url="auth/register/", data=payload)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
        await state.update_data(token=user.get("access"),
                                user=user,
                                role=user.get("role"))

        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user}")

        if user["role"] == "support":
            await chat_handler.send_message(message=message, text=
            f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏*\n"
            f"_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
                                            reply_markup=get_support_menu())

        if user["role"] == "admin":
            await chat_handler.send_message(message=message, text=
            f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ê–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏*\n"
            f"_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
                                            reply_markup=get_admin_menu())

    except Exception as e:
        logging.error(f"‚ùå Main function error: {e}", exc_info=True)

        # if user["role"] == "admin":
        #     await chat_handler.send_message(message,
        #                                     f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏*\n"
        #                                     f"_–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
        #                                     reply_markup=get_manager_inline_keyboard())
        #
        # if user["role"] == "manager":
        #     await chat_handler.send_message(message,
        #                                     f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞*\n"
        #                                     f"_–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
        #                                     reply_markup=get_manager_inline_keyboard())
        #
        # if user["role"] == "cook":
        #     await chat_handler.send_message(message,
        #                                     f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–≤–∞—Ä–∞*\n"
        #                                     f"_–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
        #                                     reply_markup=get_manager_inline_keyboard())
        #
        # if user["role"] == "runner":
        #     await chat_handler.send_message(message,
        #                                     f"*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ä–∞–∑–¥–∞—á–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤*\n"
        #                                     f"_–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
        #                                     reply_markup=get_manager_inline_keyboard())
        #
        # if user["role"] == "client":
        #     await chat_handler.send_message(message,
        #                                     f"*–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ* "
        #                                     f"{'' if user['telegram_fullname'] is None else user['telegram_fullname']}"
        #                                     f"!\n*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å:* {user['bonus']} –±–æ–Ω—É—Å–æ–≤!\n" +
        #                                     f"_–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —ç—Ç–∏ –±–æ–Ω—É—Å—ã_\n" +
        #                                     f"_–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏._",
        #                                     reply_markup=get_main_inline_keyboard())
        #
        # if user["role"] == "delivery":
        #     await chat_handler.send_message(message,
        #                                     "*üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞*\n"
        #                                     f"_–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏_",
        #                                     reply_markup=get_delivery_reply_keyboard())
        # logging.info(f"8")
    # except Exception as e:
    #     print(f"Main function error: {e}")

# @router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer(f'–ü—Ä–∏–≤–µ—Ç, ID: {message.from_user.id}\n',reply_markup=  kb.main)
#
# @router.message(Command('help'))
# async def get_help(message: Message):
#     await message.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help')
#
# @router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
# async def how_are_you(message: Message):
#     await message.answer('–û–ö!')
#
# @router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
# async def how_are_you(message: Message):
#     await message.answer('–û–ö!')
#
# @router.message(Command('get_photo'))
# async def get_photo(message: Message):
#     await message.answer_photo(
#         photo='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSw1-HFGXIZ1ZpK4-ksQiYXffU6xQelzNF6fA&s',
#         caption='–≠—Ç–æ –ª–æ–≥–æ –¢–ì'
#     )

# @router.message()
# async def debug_all_messages(message: Message):
#     print("DEBUG:", message)
